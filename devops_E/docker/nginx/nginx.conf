user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent"';
    access_log /var/log/nginx/access.log main;

    # Performance
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;

    # Gzip
    gzip on;
    gzip_vary on;
    gzip_types text/plain text/css application/json application/javascript;

    # ‚ö†Ô∏è RESOLVER : Permet la r√©solution DNS dynamique
    resolver 127.0.0.11 valid=10s;  # Docker DNS

    server {
        listen 80;
        server_name localhost;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;

        # Root - Simple page de bienvenue
        location = / {
            return 200 "üéÆ Transcendence DevOps - Infrastructure Ready\n\nAvailable endpoints:\n- GET /health (this nginx)\n- GET /api/health (backend - if running)\n- GET /metrics (monitoring)\n\nMonitoring:\n- Grafana: http://localhost:3004\n- Prometheus: http://localhost:9090\n";
            add_header Content-Type text/plain;
        }

        # Health check
        location /health {
            access_log off;
            return 200 "nginx healthy\n";
            add_header Content-Type text/plain;
        }

        # Frontend - avec gestion d'erreur
        location /app/ {
            set $frontend_upstream http://frontend_b:5173;
            proxy_pass $frontend_upstream;
            
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            
            # Si frontend down, retourner un message
            error_page 502 503 504 = @frontend_down;
        }

        # Backend API - avec gestion d'erreur
        location /api/ {
            set $backend_upstream http://backend_a:3000;
            rewrite ^/api/(.*) /$1 break;
            proxy_pass $backend_upstream;
            
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            
            error_page 502 503 504 = @backend_down;
        }

        # Auth Service - avec gestion d'erreur
        location /auth/ {
            set $auth_upstream http://auth_c:3001;
            rewrite ^/auth/(.*) /$1 break;
            proxy_pass $auth_upstream;
            
            error_page 502 503 504 = @auth_down;
        }

        # Game WebSocket - avec gestion d'erreur
        location /game {
            set $game_upstream http://game_d:3002;
            proxy_pass $game_upstream;
            
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            error_page 502 503 504 = @game_down;
        }

        # Fallback pages
        location @frontend_down {
            return 503 "‚ö†Ô∏è Frontend service not available\nStart it with: docker-compose up -d frontend_b\n";
            add_header Content-Type text/plain;
        }

        location @backend_down {
            return 503 "‚ö†Ô∏è Backend API not available\nStart it with: docker-compose up -d backend_a\n";
            add_header Content-Type text/plain;
        }

        location @auth_down {
            return 503 "‚ö†Ô∏è Auth service not available\nStart it with: docker-compose up -d auth_c\n";
            add_header Content-Type text/plain;
        }

        location @game_down {
            return 503 "‚ö†Ô∏è Game service not available\nStart it with: docker-compose up -d game_d\n";
            add_header Content-Type text/plain;
        }

        # Monitoring (restreint)
        location /metrics {
            allow 127.0.0.1;
            allow 172.16.0.0/12;
            deny all;
            
            return 200 "Prometheus metrics endpoint\n";
            add_header Content-Type text/plain;
        }
    }
}